html {
    scroll-behavior: smooth;
}

body {
    font: 20px Montserrat, sans-serif;
    line-height: 1.8;
    color: #f5f6f7;
    overflow-y: visible;
    overflow-x: hidden !important;
}

p {
    font-size: 16px;
}

.margin {
    margin-bottom: 45px;
}

.bg-1 {
    background-color: #880E4F;
    /* Green */
    color: #ffffff;
}

.bg-2 {
    background-color: #474e5d;
    /* Dark Blue */
    color: #ffffff;
}

.bg-3 {
    background-color: #ffffff;
    /* White */
    color: #555555;
}

.bg-4 {
    background-color: #2f2f2f;
    /* Black Gray */
    color: #fff;
}

.container-fluid {
    padding-top: 70px;
    padding-bottom: 70px;
}

.navbar {
    padding-top: 15px;
    padding-bottom: 15px;
    border: 0;
    background: transparent;
    border-radius: 0;
    margin-bottom: 0;
    font-size: 12px;
    letter-spacing: 5px;
}

.navbar .navbar-nav li a:hover {
    color: yellow !important;
}

.navbar-brand {
    color: black !important;
}


/* Extra small devices (phones, 600px and down) */

@media only screen and (max-width: 600px) {
    .example {
        background: red;
    }
}


/* Small devices (portrait tablets and large phones, 600px and up) */

@media only screen and (min-width: 600px) {
    #eyes {
        animation: pic 3.2s infinite;
        transform-box: fill-box;
        transform-origin: bottom;
    }
    @keyframes pic {
        0% {
            transform: scaleY(1);
        }
        8% {
            transform: scaleY(0);
        }
        16% {
            transform: scaleY(1);
        }
        100% {
            transform: scaleY(1);
        }
    }
    #hair {
        animation: flower1 1.4s infinite linear alternate;
        transform-origin: bottom;
        transform-box: fill-box;
    }
    @keyframes flower1 {
        from {
            transform: rotateZ(30deg);
        }
        to {
            transform: rotateZ(-30deg);
        }
    }
    #hand1 {
        animation: hand11 1.4s infinite linear alternate;
        transform-origin: top;
        transform-box: fill-box;
    }
    @keyframes hand11 {
        from {
            transform: rotateZ(30deg);
        }
        to {
            transform: rotateZ(-30deg);
        }
    }
    #hand2 {
        animation: hand22 1.4s infinite linear alternate;
        transform-origin: top;
        transform-box: fill-box;
    }
    @keyframes hand22 {
        from {
            transform: rotateZ(-30deg);
        }
        to {
            transform: rotateZ(30deg);
        }
    }
    #leg {
        animation: leg1 1.4s infinite linear alternate;
        transform-origin: top;
        transform-box: fill-box;
    }
    @keyframes leg1 {
        from {
            transform: rotateZ(-30deg);
        }
        to {
            transform: rotateZ(30deg);
        }
    }
    #main {
        animation: main1 10s infinite linear;
        transform-origin: right;
    }
    @keyframes main1 {
        from {
            transform: translate(-100%, 0%)
        }
        to {
            transform: translate(350%, 0%);
        }
    }
}


/* Medium devices (landscape tablets, 768px and up) */


/* Extra large devices (large laptops and desktops, 1200px and up) */

@media only screen and (min-width: 1200px) {
    #eyes {
        animation: pic 3.2s infinite;
        transform-box: fill-box;
        transform-origin: bottom;
    }
    @keyframes pic {
        0% {
            transform: scaleY(1);
        }
        8% {
            transform: scaleY(0);
        }
        16% {
            transform: scaleY(1);
        }
        100% {
            transform: scaleY(1);
        }
    }
    #hair {
        animation: flower1 1.4s infinite linear alternate;
        transform-origin: bottom;
        transform-box: fill-box;
    }
    @keyframes flower1 {
        from {
            transform: rotateZ(30deg);
        }
        to {
            transform: rotateZ(-30deg);
        }
    }
    #hand1 {
        animation: hand11 1.4s infinite linear alternate;
        transform-origin: top;
        transform-box: fill-box;
    }
    @keyframes hand11 {
        from {
            transform: rotateZ(30deg);
        }
        to {
            transform: rotateZ(-30deg);
        }
    }
    #hand2 {
        animation: hand22 1.4s infinite linear alternate;
        transform-origin: top;
        transform-box: fill-box;
    }
    @keyframes hand22 {
        from {
            transform: rotateZ(-30deg);
        }
        to {
            transform: rotateZ(30deg);
        }
    }
    #leg {
        animation: leg1 1.4s infinite linear alternate;
        transform-origin: top;
        transform-box: fill-box;
    }
    @keyframes leg1 {
        from {
            transform: rotateZ(-30deg);
        }
        to {
            transform: rotateZ(30deg);
        }
    }
    #main {
        animation: main1 10s infinite linear;
        transform-origin: right;
    }
    @keyframes main1 {
        from {
            transform: translate(-100%, 0%)
        }
        to {
            transform: translate(350%, 0%);
        }
    }
}

@import url('https://fonts.googleapis.com/css?family=Amatic+SC&display=swap');
.amaticsc {
    font-family: 'Amatic SC', cursive;
}


/*

All grid code is placed in a 'supports' rule (feature query) at the bottom of the CSS (Line 77). 
        
The 'supports' rule will only run if your browser supports CSS grid.

Flexbox is used as a fallback so that browsers which don't support grid will still recieve an identical layout.

*/

@import url(https://fonts.googleapis.com/css?family=Montserrat:500);
:root {
    /* Base font size */
    font-size: 10px;
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

body {
    min-height: 100vh;
    background-color: #fafafa;
}

.container1 {
    max-width: 100rem;
    margin: 0 auto;
    padding: 0 2rem 2rem;
}

.heading {
    font-family: "Montserrat", Arial, sans-serif;
    font-size: 4rem;
    font-weight: 500;
    line-height: 1.5;
    text-align: center;
    padding: 3.5rem 0;
    color: #1a1a1a;
}

.heading span {
    display: block;
}

.gallery {
    display: flex;
    flex-wrap: wrap;
    /* Compensate for excess margin on outer gallery flex items */
    margin: -1rem -1rem;
}

.gallery-item {
    /* Minimum width of 24rem and grow to fit available space */
    flex: 1 0 24rem;
    /* Margin value should be half of grid-gap value as margins on flex items don't collapse */
    margin: 1rem;
    box-shadow: 0.3rem 0.4rem 0.4rem rgba(0, 0, 0, 0.4);
    overflow: hidden;
}

.gallery-image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 400ms ease-out;
}

.gallery-image:hover {
    transform: scale(1.15);
}


/*

The following rule will only run if your browser supports CSS grid.

Remove or comment-out the code block below to see how the browser will fall-back to flexbox styling. 

*/

@supports (display: grid) {
    .gallery {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(24rem, 1fr));
        grid-gap: 2rem;
    }
    .gallery,
    .gallery-item {
        margin: 0;
    }
}